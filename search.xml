<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零搭建hexo私人博客</title>
      <link href="/2019/12/08/createhexo/"/>
      <url>/2019/12/08/createhexo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章主要讲解，依托于github，搭建一个属于自己的炫酷博客网站<br>如果觉得自己可以，可直接参照hexo官网<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方文档</a>，否则还是按部就班看我接下来的内容</p></blockquote><h5 id="1、下载安装nodejs-之前如果下载并安装完毕跳过"><a href="#1、下载安装nodejs-之前如果下载并安装完毕跳过" class="headerlink" title="1、下载安装nodejs(之前如果下载并安装完毕跳过)"></a>1、下载安装nodejs(之前如果下载并安装完毕跳过)</h5><p><strong>注意：hexo需要的nodejs版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本</strong></p><blockquote><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs官方下载地址</a></p></blockquote><ol><li><p>点击上方链接，根据自己电脑环境，下载对应版本，本人win10，下载的是64bit的.msi版本</p></li><li><p>双击刚才下载的文件进行安装，全程除了修改安装路径，其他不需勾选，完成</p></li><li><p>验证是否安装成功，win+R打开cmd命令行窗口，输入node -v回车，输出版本表示安装成功，可继续输入npm -v回车也会输出npm源的版本</p></li><li><p>设置npm的下载源，默认的下载的速度太慢，我们可以设置为国内的源，如淘宝，打开cmd窗口，输入下方指令回车，即设置成功</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span></pre></td></tr></table></figure><p>到这一步，我们的nodejs就安装完毕了。。。</p><h5 id="2、下载安装配置git，创建一个自己的github账号，并在github上配置一下ssh-之后出一篇git文章，先自行百度"><a href="#2、下载安装配置git，创建一个自己的github账号，并在github上配置一下ssh-之后出一篇git文章，先自行百度" class="headerlink" title="2、下载安装配置git，创建一个自己的github账号，并在github上配置一下ssh(之后出一篇git文章，先自行百度)"></a>2、下载安装配置git，创建一个自己的github账号，并在github上配置一下ssh(之后出一篇git文章，先自行百度)</h5><h5 id="3、安装hexo"><a href="#3、安装hexo" class="headerlink" title="3、安装hexo"></a>3、安装hexo</h5><blockquote><p>可同时参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">nodejs官网</a>，左方目录选择概述下部分内容</p></blockquote></li><li><p><strong>cmd命令行</strong>窗口中执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span></pre></td></tr></table></figure></li><li><p>在本地任意盘下新建一个文件夹(用英文命名)</p></li><li><p><strong>进入新建的文件夹</strong>，右键选择Git Bash Here</p></li><li><p>执行 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo init 文件夹名(任意一个英文名称)</span></pre></td></tr></table></figure></li><li><p>cd进入4创建的文件夹名</p></li><li><p>输入<strong>npm install</strong>回车</p></li><li><p>执行<strong>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</strong>回车（ctrl+c本地终止，之后本地改动后需要本地测试，直接进入到4新建的文件夹下的git命令行中执行hexo s即可，如果有问题先执行hexo clean清理一下缓存）</p></li><li><p>打开浏览器访问localhost:4000，初始化完毕</p></li><li><p>现在只是在本地启动，接下来我们和github进行关联</p><h5 id="4、github配置-前提已经注册了自己的github账户并登录进去"><a href="#4、github配置-前提已经注册了自己的github账户并登录进去" class="headerlink" title="4、github配置(前提已经注册了自己的github账户并登录进去)"></a>4、github配置(前提已经注册了自己的github账户并登录进去)</h5></li></ol><ol start="13"><li><p>创建一个仓库new Repository</p></li><li><p>填写Repository name的时候，一定和前面的owner名字一致<br><img src="https://graph.baidu.com/resource/1119a81c02e192ee3303101575741635.jpg" alt="按照图示创建"></p></li><li><p>点击create就完成了仓库的创建</p><h5 id="5、避免之后中文乱码问题"><a href="#5、避免之后中文乱码问题" class="headerlink" title="5、避免之后中文乱码问题"></a>5、避免之后中文乱码问题</h5><p>在步骤3中的第4步创建的文件夹下，有一个_config.yml文件，打开修改language: zh-CN，注意空格</p><h5 id="6、将博客推送到github"><a href="#6、将博客推送到github" class="headerlink" title="6、将博客推送到github"></a>6、将博客推送到github</h5><blockquote><p>可参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">nodejs官网</a>，左方目录选择GitHub Pages下部分内容</p></blockquote></li><li><p>在步骤3中的第4步创建的文件夹下，右键进入git bash here界面，执行下面这条命令</p></li><li><p>npm install hexo-deployer-git –save</p></li><li><p>在_config.yml中继续配置下面内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">deploy:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> type: git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;project&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> # example, https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexojs.github.io</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> branch: master</span></pre></td></tr></table></figure><p>改一下repo的内容就行，这里的username就是你的github的owner名字，比如我的就是repo: <a href="https://github.com/liuleiStu/liuleiStu.github.io" target="_blank" rel="noopener">https://github.com/liuleiStu/liuleiStu.github.io</a><br><img src="./images/1575737457045.png" alt="按照图示创建"></p></li><li><p>继续在git界面下执行<strong>hexo clean &amp;&amp; hexo deploy</strong>命令，会出现输入github用户名和密码，然后就上传成功了</p></li><li><p>浏览器访问username.github.io，比如我的就是liuleiStu.github.io</p><h5 id="7、挑选炫酷的hexo主题"><a href="#7、挑选炫酷的hexo主题" class="headerlink" title="7、挑选炫酷的hexo主题"></a>7、挑选炫酷的hexo主题</h5></li><li><p>进入<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">nodejs官网</a>，上方选择主题</p></li><li><p>这里可以挑选自己喜欢的样式，找到自己喜欢的主题后，在该主题中找到github仓库，按照仓库的步骤进行配置即可</p></li><li><p>比如进入hexo主题，选择这个主题<br><img src="https://graph.baidu.com/resource/1117741d7f49dd175f1c901575741458.jpg" alt="enter description here"></p></li><li><p>在主题中寻找github地址<br><img src="https://graph.baidu.com/resource/11111483ec119eebafb8f01575741536.jpg" alt="enter description here"></p></li><li><p>点击进入该github地址，找到存放hexo主题的仓库，点击进入<br><img src="https://graph.baidu.com/resource/111e8c94ab4ee2ff0135901575741571.jpg" alt="enter description here"></p></li><li><p>就会看到下面的界面<br><img src="https://graph.baidu.com/resource/11138cceb9157042ca9bb01575741600.jpg" alt="enter description here"></p></li><li><p>按照步骤进行配置即可</p><h5 id="8、发布文章到自己的博客-之后更新"><a href="#8、发布文章到自己的博客-之后更新" class="headerlink" title="8、发布文章到自己的博客(之后更新)"></a>8、发布文章到自己的博客(之后更新)</h5></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2019/12/07/test/"/>
      <url>/2019/12/07/test/</url>
      
        <content type="html"><![CDATA[<h1 id="rocketmq"><a href="#rocketmq" class="headerlink" title="rocketmq"></a>rocketmq</h1><p>[TOC]</p><h2 id="rocketmq入门"><a href="#rocketmq入门" class="headerlink" title="rocketmq入门"></a>rocketmq入门</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h3 id="竞品对比"><a href="#竞品对比" class="headerlink" title="竞品对比"></a>竞品对比</h3><blockquote><p>rocketmq:一个分布式队列模型的消息中间件<br>能保证消息的执行顺序<br>提供消息拉取模式<br>实时消息订阅<br>支持事务</p></blockquote><blockquote><p>rabbitmq:</p></blockquote><blockquote><p>kafka:该消息队列是用scala语言编写的，基于发布订阅模式的分布式消息队列<br>特点：高吞吐量，完全的分布式系统，依赖zk自动实现负载均衡，高堆积</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>64位操作系统<br>JDK1.8以上<br>maven 3.2<br>Git</p></blockquote><h3 id="官网：rocketmq-apache-org"><a href="#官网：rocketmq-apache-org" class="headerlink" title="官网：rocketmq.apache.org"></a>官网：rocketmq.apache.org</h3><h3 id="单节点安装"><a href="#单节点安装" class="headerlink" title="单节点安装"></a>单节点安装</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><blockquote><p>在虚拟机hosts文件中配置地址与IP映射关系  /etc/hosts<br>IP rocketmq-nameserver1<br>IP rocketmq-master1</p></blockquote><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><blockquote><p>1、解压目录<br>2、在解压的目录下创建存储文件：logs,日志文件目录;store,数据文件目录;<br>3、进入store目录，创建：commitlog,消息信息;consumequeue和index目录,存放消息的索引数据</p></blockquote><blockquote><p>conf目录，rocketmq天生支持集群模式<br>2m-2s-async：双主双从异步<br>2m-2s-sync：双主双从同步<br>2m-noslave：2主没有从<br>先配置单节点，修改2m-2s-async的配置实现，进入该目录，里面含有对应4个文件，修改broke-a.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">#所属集群名字</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">brokerClusterName&#x3D;rocketmq-cluster</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#broker的名字</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">brokerName&#x3D;broker-a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">#0表示master 大于0表示slave</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">brokerId&#x3D;0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#nameServer 地址，分号分割</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">namesrvAddr&#x3D;rocketmq-nameserver1:9876</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">defaultTopicQueueNums&#x3D;4</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">#是否允许Broker自动创建Topic</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">autoCreateTopicEnable&#x3D;true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">#是否允许Broker自动创建订阅组</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">autoCreateSubscriptionGroup&#x3D;true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">#Broker 对外服务的监听端口</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">listenPort&#x3D;10911</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">#删除文件时间点，默认凌晨4点</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">deleteWhen&#x3D;04</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">#文件保留时间，默认48小时</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">fileReservedTime&#x3D;120</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">#commitLog每个文件大小，默认1G</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">mapedFileSizeCommitLog&#x3D;1073741824</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">#ConsumeQueue每个文件默认存30W条</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">mapedFileSizeConsumeQueue&#x3D;300000</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">#检测物理文件磁盘空间</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">diskMaxUsedSpaceRatio&#x3D;88</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">#存储路径</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">storePathRootDir&#x3D;&#x2F;usr&#x2F;local&#x2F;server&#x2F;mq&#x2F;rocketmq&#x2F;store</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">#commitLog存储路径</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">storePathCommitLog&#x3D;&#x2F;usr&#x2F;local&#x2F;server&#x2F;mq&#x2F;rocketmq&#x2F;store&#x2F;commitLog</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">#消息队列存储路径</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">storePathConsumeQueue&#x3D;&#x2F;usr&#x2F;local&#x2F;server&#x2F;mq&#x2F;rocketmq&#x2F;store&#x2F;comsumequeue</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">#消息索引存储路径</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">storePathIndex&#x3D;&#x2F;usr&#x2F;local&#x2F;server&#x2F;mq&#x2F;rocketmq&#x2F;store&#x2F;index</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">#checkpoint 文件存储路径</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">storeCheckpoint&#x3D;&#x3D;&#x2F;usr&#x2F;local&#x2F;server&#x2F;mq&#x2F;rocketmq&#x2F;store&#x2F;checkpoint</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">#abort文件存储路径</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">abortFile&#x3D;&#x2F;usr&#x2F;local&#x2F;server&#x2F;mq&#x2F;rocketmq&#x2F;store&#x2F;abort</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">#限制消息的大小</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">maxMessageSize&#x3D;65536</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">#broker的角色</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">#ASYNC_MASTER 异步复制master</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">#SYNC_MASTER 同步双写master</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">#slave</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">brokerRole&#x3D;ASYNC_MASTER</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">#刷盘方式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">flushDiskType&#x3D;ASYNC_FLUSH</span></pre></td></tr></table></figure><blockquote><p>进入conf目录，替换所有xml中的${user.home}<br>sed -i ‘s#${user.home}#/usr/local/server/mq/rocketmq#g’ *.xml<br>sed -i在这里批量替换<br>sed -i ‘s#原字符串#新字符串#g’ 替换的文件</p></blockquote><blockquote><p>rocketmq对性能要求比较高，最少1G,需要修改bin下的runbroker.sh和runserver.sh<br>runbroker.sh改为JAVA_OPT=”${JAVA_OPT} -server -Xms1g -Xms1g -Xmn1g”<br>runserver.sh改为JAVA_OPT=”${JAVA_OPT} -server -Xms1g -Xmx1g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m”</p></blockquote><blockquote><p>启动，先启动namesrv<br>nohup sh mqnamesrv &amp;<br>再启动broker<br>nohup sh mqbroker -c /usr/local/server/mq/rocketmq/conf/2m-2s-async/broker-a.properties &gt; /dev/null 2&gt;&amp;1 &amp;<br>jps查看进程</p></blockquote><h4 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h4><blockquote><p>github.com/apache/rocketmq-externals/tree/master下载，导入项目，<br>修改配置文件里面rocketmq位置,启动项目，访问8080端口</p></blockquote><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p><img src="https://github.com/liuleiStu/blogImage/blob/master/rocketmq/%E6%9E%B6%E6%9E%84%E5%9B%BE.png?raw=true" alt="架构图"></p><blockquote><p>操作流程<br>1、启动namesrv，监听端口，等待broker,producer,consumer连接，相当于路由控制中心<br>2、broker启动，与所有的namesrv保持长连接，定时发送心跳包，心跳包里面包含broker信息和含有的topic信息，在namesrv上注册<br>3、producer发送消息，首先跟namesrv集群中一台建立长连接，从namesrv获取当前发送的topic在哪台broker上，然后去找<br>4、consumer也是先去跟namesrv连接</p></blockquote><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><blockquote><p>rocketmq可以发送多种消息，普通消息，顺序消息，事务消息</p></blockquote><blockquote><p>两种消费模式，DefaultMQPushConsumer和DefaultMQPullConsumer，推送消息，拉取消息<br>推送是指，consumer向broker发出请求，保持长连接，broker每5秒检测有没有消息，有就推送给consumer，broker会记录消息消费的偏移量<br>主动拉取，需要记录偏移量信息，可控</p></blockquote><blockquote><p>每个topic含有多个队列，当生产者发送消息到topic，会选择一个队列进行存储，解决了消息的并发问题</p></blockquote><blockquote><p>ack机制</p></blockquote><h5 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h5><blockquote><p>创建一个springboot项目<br>pom.xml文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &lt;rocketmq.version&gt;4.4.0&lt;&#x2F;rocketmq.version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;properties&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &lt;scope&gt;test&lt;&#x2F;scope&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        &lt;groupId&gt;org.apache.rocketmq&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &lt;artifactId&gt;rocketmq-client&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &lt;version&gt;$&#123;rocketmq.version&#125;&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    &lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependencies&gt;</span></pre></td></tr></table></figure><blockquote><p>发送消息步骤<br>1、创建DefaultMQProducer<br>2、设置Namesrv地址<br>3、开启DefaultMQProducer<br>4、创建消息message<br>5、关闭DefaultMQProducer</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">DefaultMQProducer producer &#x3D; new DefaultMQProducer(&quot;指定消息发送组&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">producer.setNamesrvAddr(&quot;IP：端口号&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">producer.start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Message message &#x3D; new Message(&quot;topic名字&quot;,&quot;标签用来作过滤&quot;,&quot;唯一标识&quot;，&quot;用来查找消息&quot;,&quot;要发送的消息字节数组&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">producer.send(message);&#x2F;&#x2F;有返回值String</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">producer.shutdown();</span></pre></td></tr></table></figure><blockquote><p>消息消费步骤<br>1、创建DefaultMQPushConsumer<br>2、设置namesrv地址<br>3、设置subscribe，读取的主题<br>4、创建消息监听MessageListener<br>5、获取消息信息<br>6、返回消息读取状态<br>7、开启</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer &#x3D; new DefaultMQPushConsumer(&quot;消费者组&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">consumer.setNamesrvAddr(&quot;IP:端口号&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">consumer.subscribe(&quot;读取的主题&quot;,&quot;标签，所有数据写*&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">consumer.setMessageListener(new MessageListenerConcurrently(匿名内部类里面获取消息，返回状态));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">consumer.start();</span></pre></td></tr></table></figure><p>顺序消息</p><blockquote><p>按照消息的发送顺序进行消费，局部顺序<br>如何保证顺序：消息被发送时保证顺序；消息存储时和发送顺序一致；消费时和存储顺序一致<br>每次都发送同一个队列里面<br>修改发送消息方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;三个参数：发送的消息，选中指定消息队列对象，指定对应队列下标</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">producer.send(message,new MessageQueueSelector()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    Integer index &#x3D; (Integer)args;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    return msg.get(index);  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;,1;)</span></pre></td></tr></table></figure><p>事务消息<br><img src="https://github.com/liuleiStu/blogImage/blob/master/rocketmq/%E4%BA%8B%E5%8A%A1.png?raw=true" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
